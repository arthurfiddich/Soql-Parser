grammar Soql
  rule query
    select_clause space from_clause
  end

  rule select_clause
    select space field_list
  end

  rule field_list
    select_expression space? comma space? field_list / select_expression
  end

  rule select_expression
    subquery / aggregate_expression / date_expression / identifier
  end

  rule subquery
    "(" space? query space? ")"
  end

  rule aggregate_expression
    aggregate_function space? "(" space? identifier space? ")" / count "(" space? ")"
  end

  rule aggregate_function
    avg / count_distinct / count / min / max / sum
  end

  rule date_expression
    date_function space? "(" space? identifier space? ")"
  end

  rule date_function
    calendar_month / calendar_quarter / calendar_year /
    day_in_month / day_in_week / day_in_year / day_only /
    fiscal_month / fiscal_quarter / fiscal_year /
    hour_in_day / week_in_month / week_in_year
  end

  rule avg
    "avg"
  end

  rule count
    "count"
  end

  rule count_distinct
    "count_distinct"
  end

  rule min
    "min"
  end

  rule max
    "max"
  end

  rule sum
    "sum"
  end

  rule calendar_month
    "calendar_month"
  end

  rule calendar_quarter
    "calendar_quarter"
  end

  rule calendar_year
    "calendar_year"
  end

  rule day_in_month
    "day_in_month"
  end

  rule day_in_week
    "day_in_week"
  end

  rule day_in_year
    "day_in_year"
  end

  rule day_only
    "day_only"
  end

  rule fiscal_month
    "fiscal_month"
  end

  rule fiscal_quarter
    "fiscal_quarter"
  end

  rule fiscal_year
    "fiscal_year"
  end

  rule hour_in_day
    "hour_in_day"
  end

  rule week_in_month
    "week_in_month"
  end

  rule week_in_year
    "week_in_year"
  end

  rule from_clause
    from space identifier
  end

  rule select
    "select"
  end

  rule from
    "from"
  end

  rule where
    "where"
  end

  rule limit
    "limit"
  end

  rule having
    "having"
  end

  rule offset
    "offset"
  end

  rule order_by
    "order" space by
  end

  rule group_by
    "group" space by
  end

  rule by
    "by"
  end

  rule space
    [\s]+
  end

  rule comma
    ","
  end

  rule identifier
    [_a-zA-Z] [\w]* #<Identifier>
  end

  rule integer_literal
    ('+' / '-')? [0-9]+ #<IntegerLiteral>
  end

  rule string_literal
    "'" string_value "'" #<StringLiteral>
  end

  rule string_value
    (!"'" . / "\\'")*
  end

  rule true_literal
    'true' !([_a-zA-Z] .) #<TrueLiteral>
  end

  rule false_literal
    'false' !([_a-zA-Z] .) #<FalseLiteral>
  end

  rule boolean_literal
    true_literal / false_literal
  end

  rule null_literal
    'null' !([_a-zA-Z] .) #<NullLiteral>
  end

  rule literal
    integer_literal / string_literal / boolean_literal / null_literal
  end

  rule equals_operator
    '=' #<EqualsOperator>
  end

  rule not_equals_operator
    '!=' #<NotEqualsOperator>
  end

  rule less_than_operator
    '<' #<LessThanOperator>
  end

  rule greater_or_equals_operator
    '>=' #<GreaterOrEqualsOperator>
  end

  rule less_or_equals_operator
    '<=' #<LessOrEqualsOperator>
  end

  rule greater_than_operator
    '>' #<GreaterThanOperator>
  end
end
